******************************************************************************************
2.1
Objective summary
■■ HTML provides much of the structure to a rendered webpage. CSS provides additional control over the look and feel, 
or presentation, of a webpage. The combination of HTML and CSS is what allows 
two different websites to look different from each other yet use the same constructs.
■■ A primary function of ASP.NET MVC is to provide information to the site visitor.
HTML and CSS enable you to format that information in a visually appealing way that
enhances the visitor’s ability to use your website and find and use the information the website provides.
■■ Dynamic page content is the main reason to use ASP.NET MVC 4. Dynamic content is 
different information displayed based on a set of conditions. These conditions can
include user, day, time, user actions, site status, or a similar criterion.
■■ When using the Razor view engine, the _Layout.cshtml file contains the primary 
design template for the application. One of the key features is the link to the CSS 
file that defines the styles for the site. This file also contains common UI elements,
such as menus, headers, and footers for the pages in the site. A site can have one or more CSS files.
■■ The ASPX view engine uses the Site.Master file rather than the _Layout.cshtml file.
■■ Helpers are ASP.NET MVC code constructs that output HTML. There are many different 
helpers, such as @Html.TextBox, that give the developer a way to use one line of code to create a complete HTML structure.

MORE INFO CSS FEATURES AND EXAMPLES
For more information on various CSS features and examples, visit http://www.w3schools.
com/cssref/default.asp.

NOTE EMBEDDING TTF FONTS
You can read more about how to embed TTF fonts in CSS at http://msdn.microsoft.com/
en-us/library/ms533034(v=VS.85).aspx.

Common HTML helpers
HTML helper Description
BeginForm Creates a starting <form> tag
EndForm Creates an ending <form> tag
TextArea Creates an HTML <textarea> input
TextBox Creates an HTML input box with a type of text
CheckBox Creates an HTML check box
RadioButton Creates an HTML radio button
ListBox Creates an HTML list box

Common extension methods for use in views
Extension Description
CheckBoxFor Creates an HTML check box and relates it to a property in the model
EditorFor Creates an HTML input box and relates it to a property in the model
ListBoxFor Creates an HTML list box and relates it to a property in the model
RadioButtonFor Creates an HTML radio button and relates it to a property in the model
TextAreaFor Creates an HTML <textarea> input and relates it to a property in the model
ValidationMessage Defines the area where validation message will be displayed
ValidationSummary Defines an area that will display all the validation messages for a view

******************************************************************************************
2.2
Objective summary
■■ Client validation is an important feature that JavaScript and ASP.NET MVC support that
help eliminate trips between the client and the server by checking on the client side
whether valid values have been put into a form. These client-side validation rules are
built on top of data annotations just as the validation rules that are run on the server
side are.
■■ Third-party JavaScript libraries, including JQuery, can be useful when designing the UI
of an MVC application. After selecting an element through the DOM, you can programmatically
manipulate all aspects of the element. JavaScript enables UI logic to be
handled completely on the client side without the need for additional communication
with the server.
■■ The jQuery library isn’t limited to adding a few additional widgets. It can also be used
to create effects and animations, creating a more interactive web application. It is also
112 CHAPTER 2 Design the user experience
important in helping to ensure that cross-browser compatibility issues are managed. The jQuery library was designed to support all major browsers and many of their older versions.
■■JavaScript is different from languages such as C# because it does not support a constructor.
Instead, developers can use prototypes to create objects. The objects can encompass previously 
created JavaScript libraries. Because both objects—the original object and the prototype—share the same behaviors, 
it makes it simpler to manage what each of the objects is doing in the UI.
■■Although AJAX is mainly used to retrieve and send information, it can also be used to push
the newly acquired information into UI elements. Doing so can help create a dynamic, fast, and fluid application.

EXAM TIP
You should master validation before taking the 70-486 exam because of its importance to
various parts of your application’s user experience, including UI behavior and data security. 
Validation also flows across the model, view, and controller, affecting all levels of your application. 
Understand how to configure validation, how to access the validity of your model when working in the controller,
and how to ensure client-side validation and display validation messages in the view.

Using remote validation
The examples provided previously in this section involve a static set of rules that can be attributed on the model.
There will be situations in which you will need to perform a more interactive validation. An example is the Register
User section of an application. You want new users to know immediately if the user name they enter is available.
The only way to do this is through a remote validator that posts the user name back to the server, which tells you whether that value is available.

Using AJAX to make partial page updates
You can use Asynchronous JavaScript and XML (AJAX) within MVC web applications to send and retrieve 
data from a server asynchronously without having to perform a complete HTTP request/response process 
for the entire page. The user experience is greatly improved because only the results of the AJAX call are returned and displayed.
The data transferred between the client and server is generally XML or JavaScript Object Notation (JSON).


******************************************************************************************
2.3
Objective summary
■■ Partial views are a way to reuse functionality on multiple pages. 
They enable the developer to write code once and include it on other pages as needed.
Partial views are the MVC replacement for user controls from ASP.NET Web Forms.
Partial views are usually stored in the Views/Shared folder.
■■The Razor view engine enables you to create reusable templates. 
The templates are assignable by object type, and can be either for 
display (DisplayTemplates) or edit (EditTemplates). Templates are
stored in the ~Views/Shared/EditorTemplates or ~Views/ControllerName/EditorTemplates 
directories and are called by @Html.EditorFor and @Html.DisplayFor.
■■Views and partial views should be reused whenever possible. If views and partial 
views use the same model and controller, you can manage the validity of the model 
through data annotations and HTML helpers. However, in other cases, you have to manage
the validation yourself, such as by using AJAX to accomplish client-side validation or 
modifying the controller and/or models to accommodate such a task.
■■Master or layout pages can be switched on the fly via code. 
Because master or layout pages usually contain information on loading JavaScript 
libraries and style sheets, switching the master or layout page can change the UI appreciably.
This could be useful if the goal is to create different user experiences based 
on conditions (for example, on a mobile browser as opposed to a desktop or laptop browser).


NOTE INSERTING A PARTIAL VIEW INTO A DIFFERENT MODEL
A partial view that is tied to a model might not be able to display correctly 
if inserted into a view being controlled by a controller other than the one that
created it. As an example, if a partial view is created for Model FOO, an additional 
workaround (such as AJAX) is needed if the partial view FOO is being inserted into a view created for model BAR.

******************************************************************************************
2.4
Objective summary
■■ Because all browsers are not created equally, you must be careful
when choosing how to display information in the UI. If business requirements dictate,
you must ensure that your application is accessible across all browsers and devices and 
that the viewing experience is the same. Additional libraries such as jQuery and Modernizr. can help achieve that goal.
■■ The HTML5 and CSS3 specifications are moving toward finalization. Browser vendors 
have incorporated alternative property names to make their browsers compatible with 
nonfinalized HTML5 and CSS3 specifications. These features are sometimes available only 
in specific manufacturers’ browsers, and only in certain versions of each browser. 
When developing for multiple browser deployment across multiple devices, you should 
use the most common features available across all the browsers for compatibility.
■■ If an application is targeted for a specific market (such as mobile or intranet) 
for which only a certain type of browser exists on a given device or devices, you should use 
only HTML and CSS features supported by that browser. This way, the client can be 
coded to specifically manage various tasks such as client-side verification and UI animation.


******************************************************************************************
2.5
Objective summary
■■ ASP.NET MVC 4 supports multiple approaches to mobile users. You can create overridden
views that are generic for any mobile device or specific to a device. The System.
Web.Mvc.VirtualPathProviderViewEngine.DisplayModeProvider evaluates incoming
requests and routes them based on the values in the userAgent of the request and the
configured DisplayModeProviders.
■■ Another choice for designing a mobile-viewable website is to use the viewport <meta>
tag and CSS @media queries. These enable you to create different style groups, based
on the minimum and maximum width of device screens.
■■ The jQuery Mobile library enables you to use markup to provide additional functionality
as supported by the client browser. If a browser does not support the functionality,
the jQuery library will downgrade the functionality gracefully.

